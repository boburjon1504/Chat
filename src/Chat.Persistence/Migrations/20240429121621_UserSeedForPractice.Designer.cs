// <auto-generated />
using System;
using Chat.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Chat.Persistence.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20240429121621_UserSeedForPractice")]
    partial class UserSeedForPractice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Chat.Domain.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstUserId")
                        .IsUnique();

                    b.HasIndex("SecondUserId")
                        .IsUnique();

                    b.ToTable("ChatRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("141a18b0-9f76-4494-bd76-5d92a63891e7"),
                            FirstUserId = new Guid("d288a320-adb3-4018-b6ce-449a124775fd"),
                            SecondUserId = new Guid("5dff9d04-9a72-4cb8-bc73-63ad04078d2d")
                        });
                });

            modelBuilder.Entity("Chat.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SendAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId")
                        .IsUnique();

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Chat.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f07b14c1-6ab2-499d-aa80-8b971a85daf6"),
                            Email = "jane.doe@email.com",
                            FirstName = "John",
                            IsOnline = false,
                            LastName = "Doe",
                            Password = "password",
                            UserName = "johndoe123"
                        },
                        new
                        {
                            Id = new Guid("62070666-dbd7-4628-9f81-25076a1e483f"),
                            Email = "alice.smith@email.com",
                            FirstName = "Alice",
                            IsOnline = false,
                            LastName = "Smith",
                            Password = "password",
                            UserName = "alicesmith87"
                        },
                        new
                        {
                            Id = new Guid("61fd9b7f-4658-41c2-9ddb-a566d220714e"),
                            Email = "david.lee@email.com",
                            FirstName = "David",
                            IsOnline = false,
                            LastName = "Lee",
                            Password = "password",
                            UserName = "davidlee99"
                        },
                        new
                        {
                            Id = new Guid("4f44febc-93c8-4161-ac19-3a7b1695fc61"),
                            Email = "emily.jones@email.com",
                            FirstName = "Emily",
                            IsOnline = false,
                            LastName = "Jones",
                            Password = "password",
                            UserName = "emilyj2023"
                        },
                        new
                        {
                            Id = new Guid("c00ee1f8-ecbe-4bfd-b6aa-a94efc63924b"),
                            Email = "michael.brown@email.com",
                            FirstName = "Michael",
                            IsOnline = false,
                            LastName = "Brown",
                            Password = "password",
                            UserName = "mikebrown7"
                        },
                        new
                        {
                            Id = new Guid("36d93ea5-26a9-42b0-9383-3a2c78dceee2"),
                            Email = "sarah.garcia@email.com",
                            FirstName = "Sarah",
                            IsOnline = false,
                            LastName = "Garcia",
                            Password = "password",
                            UserName = "sg_2001"
                        },
                        new
                        {
                            Id = new Guid("555dc4ff-dac8-4a6c-9088-0e93b95a752b"),
                            Email = "william.miller@email.com",
                            FirstName = "William",
                            IsOnline = false,
                            LastName = "Miller",
                            Password = "password",
                            UserName = "wmiller10"
                        },
                        new
                        {
                            Id = new Guid("33c7eab9-ecf0-4a2e-b8c1-c4e53410ebe1"),
                            Email = "jennifer.davis@email.com",
                            FirstName = "Jennifer",
                            IsOnline = false,
                            LastName = "Davis",
                            Password = "password",
                            UserName = "jenniferd92"
                        },
                        new
                        {
                            Id = new Guid("9709d8cf-24f4-4958-89de-cebccc844706"),
                            Email = "matthew.hernandez@email.com",
                            FirstName = "Matthew",
                            IsOnline = false,
                            LastName = "Hernandez",
                            Password = "password",
                            UserName = "mherndz88"
                        },
                        new
                        {
                            Id = new Guid("a2fc1cea-6409-4861-88cc-a317522a7ae2"),
                            Email = "ashley.young@email.com",
                            FirstName = "Ashley",
                            IsOnline = false,
                            LastName = "Young",
                            Password = "password",
                            UserName = "ash_young95"
                        });
                });

            modelBuilder.Entity("Chat.Domain.Entities.ChatRoom", b =>
                {
                    b.HasOne("Chat.Domain.Entities.User", "FirstUser")
                        .WithOne()
                        .HasForeignKey("Chat.Domain.Entities.ChatRoom", "FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Domain.Entities.User", "SecondUser")
                        .WithOne()
                        .HasForeignKey("Chat.Domain.Entities.ChatRoom", "SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Chat.Domain.Entities.Message", b =>
                {
                    b.HasOne("Chat.Domain.Entities.ChatRoom", null)
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Chat.Domain.Entities.Message", "ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
