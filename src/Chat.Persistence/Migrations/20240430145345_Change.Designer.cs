// <auto-generated />
using System;
using Chat.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Chat.Persistence.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20240430145345_Change")]
    partial class Change
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Chat.Domain.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("ChatRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("141a18b0-9f76-4494-bd76-5d92a63891e7"),
                            FirstUserId = new Guid("d288a320-adb3-4018-b6ce-449a124775fd"),
                            SecondUserId = new Guid("5dff9d04-9a72-4cb8-bc73-63ad04078d2d")
                        });
                });

            modelBuilder.Entity("Chat.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SendAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId")
                        .IsUnique();

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("beaeffe3-6f99-4a09-ae08-cd292afd522c"),
                            Body = "Salom",
                            IsDelivered = true,
                            ReceiverId = new Guid("d288a320-adb3-4018-b6ce-449a124775fd"),
                            SendAt = new DateTimeOffset(new DateTime(2024, 4, 30, 14, 53, 43, 631, DateTimeKind.Unspecified).AddTicks(9792), new TimeSpan(0, 0, 0, 0, 0)),
                            SenderId = new Guid("5dff9d04-9a72-4cb8-bc73-63ad04078d2d")
                        },
                        new
                        {
                            Id = new Guid("c0784785-b0b4-4e6a-9cd0-af47f822c1ee"),
                            Body = "Ishlaring yaxshimi",
                            IsDelivered = true,
                            ReceiverId = new Guid("5dff9d04-9a72-4cb8-bc73-63ad04078d2d"),
                            SendAt = new DateTimeOffset(new DateTime(2024, 4, 30, 19, 53, 43, 631, DateTimeKind.Unspecified).AddTicks(9838), new TimeSpan(0, 5, 0, 0, 0)),
                            SenderId = new Guid("d288a320-adb3-4018-b6ce-449a124775fd")
                        });
                });

            modelBuilder.Entity("Chat.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Chat.Domain.Entities.ChatRoom", b =>
                {
                    b.HasOne("Chat.Domain.Entities.User", "FirstUser")
                        .WithMany()
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Domain.Entities.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Chat.Domain.Entities.Message", b =>
                {
                    b.HasOne("Chat.Domain.Entities.ChatRoom", null)
                        .WithMany()
                        .HasForeignKey("ChatId");

                    b.HasOne("Chat.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Chat.Domain.Entities.Message", "ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
